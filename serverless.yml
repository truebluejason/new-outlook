# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: new-outlook # NOTE: update this with your service name

frameworkVersion: ">=1.28.0 <2.0.0"
provider:
  name: aws
  runtime: go1.x
  region: us-west-2
  iamRoleStatements:
    - Effect: "Allow"
      Action: 
         - dynamodb:Query
         - dynamodb:Scan
         - dynamodb:GetItem
         - dynamodb:PutItem
         - dynamodb:UpdateItem
         - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:us-west-2:*:*

package:
 exclude:
   - ./**
 include:
   - ./bin/**

functions:
  new-outlook:
    handler: bin/new-outlook
    events:
      - alexaSkill: 
          appId: amzn1.ask.skill.e583cddf-eea4-47c9-a44a-9150c3fa1bb8
          enabled: true

resources:
  Resources:
    NewOutlookDescriptions:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: new-outlook-descriptions
        AttributeDefinitions:
          - AttributeName: intent
            AttributeType: S
          - AttributeName: value
            AttributeType: S
        KeySchema:
          - AttributeName: intent
            KeyType: HASH
          - AttributeName: value
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    NewOutlookInitiatives:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: new-outlook-initiatives
        AttributeDefinitions:
          - AttributeName: intent
            AttributeType: S
          - AttributeName: value
            AttributeType: S
        KeySchema:
          - AttributeName: intent
            KeyType: HASH
          - AttributeName: value
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
